library(ggplot2)
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(stringr)
library(GGally)

BBall <- read.csv("Unit 2/PlayersBBall.csv")
head(BBall)
BBall[2143,]$position = "G"
BBall[2143,]$height = "6-2"
BBall[2143,]$weight = 185

BBall$position2 <- ifelse(BBall$position == "C-F","F-C",BBall$position)
BBall$position2 <- ifelse(BBall$position == "G-F","F-G", BBall$position2)

#Previous Code
##Convert Height to just inches to be able to have continuous data that is plot-able for just the forward and center data
###position_filtered_data <- position_filtered_data %>%
###  dplyr::mutate(
###    feet = as.numeric(sub("-.*", "", height)),          # Extract feet part and convert to numeric
###    inches = as.numeric(sub(".*-", "", height)),        # Extract inches part and convert to numeric
###    total_inches = feet * 12 + inches                   # Convert to total inches
###  )

#Regular Expression Code
BBall$height
splitHeight <- (str_split(BBall$height,"-",simplify=TRUE))
feet <- as.numeric(splitHeight[,1])
inches <- as.numeric(splitHeight[,2])
totalinches <- feet*12 + inches
totalinches

#I found getting the 2 split items out of the list it creates when Simplify is FALSE requires sapply to wrap over it to transfer values and is more difficult 

ggplot(BBall, aes(x=totalinches, fill=position2))+geom_histogram()+facet_wrap(~position2)+labs(title = "Histograms of Height by Position", x= "Height (in)", y= "Count")


#Section 2 of FLS 5
fifa <- read.csv("Unit 3/FIFA Players.csv")
head(fifa)

#Correcting Height
fifa_splitHeight <- (str_split(fifa$Height,"'",simplify=TRUE))
fifa_feet <- as.numeric(fifa_splitHeight[,1])
fifa_inches <- as.numeric(fifa_splitHeight[,2])
fifa$fifa_totalinches <- fifa_feet*12 + fifa_inches
fifa$fifa_totalinches


#Correcting Weight
length(fifa$Weight)
fifa$Weight2 <- as.numeric(str_replace(fifa$Weight,"lbs",""))
fifa$Weight2

fifa2 <- fifa %>% 
  dplyr::filter(!is.na(fifa$Weight2))
summary(fifa2)  


fifa2 %>% 
  filter(Position == "LB"| Position == "LM") %>%
  select(Weight = Weight2, Height = fifa_totalinches, Position) %>% 
  ggpairs(aes(color=Position)) %>% 
  ggplotly


##Section 3
boy_names = c("Oliver", "Harry", "George", "Jack","Jacob", "Noah","Charlie", "Muhammad", "Thomas", "Oscar")
girl_names = c("Olivia", "Amelia","Emily","Isla","Ava","Isabella","Lily", "Jessica","Ella","Mia")


###Question 1
df <- read.csv("Unit 5/yob2016.txt",sep=";",header=FALSE) #Read Data
summary(df) #Display the Summary and Structure of the Dataset
str(df)
df


#Find the duplicate name and drop it from the database
double_name <- str_detect(df$V1, "y{3}")
double_name
df[double_name,]


#Remove the observation
y2016 <- df[!str_detect(df, "y{3}"),]
y2016

#I want to rename the columns for future use
colnames(y2016) <- c("Name", "Gender", "NameCount")
y2016

###Question 2
y2015 <- read.csv("Unit 5/yob2015.txt", header = FALSE) #Read Data
summary(y2015) #Display the Summary and Structure of the Dataset
str(y2015)

#I want to rename the columns for future use
colnames(y2015) <- c("Name", "Gender", "NameCount")
y2015

#Grab last 10 rows of the dataframe, what is interesting about these?
tail(y2015,10)

#Merge y2016 w/ y2015 where tfhe number of named contains no NAs
final <- inner_join(y2016,y2015, by="Name")
final

#check that I didn't induce any NA's
sum(is.na(final$NameCount.x))
sum(is.na(final$NameCount.y))

###Question 3
final$total = final$NameCount.x + final$NameCount.y
final$total #look at the data

sum(final$total) #7,472,196 people were given popular names

#Top 10 popular names
top10names <- final %>% 
  arrange(desc(total)) %>% 
  head(10) %>% 
  print()

#Having a girl, filter out the boys, what are the top 10 popular GIRL names
top10girlnames <- final %>% 
  filter(Gender.x == "F" & Gender.y == "F") %>% 
  arrange(desc(total)) %>% 
  head(10) %>% 
  print()

top10girlnamesoutput <- top10girlnames %>% 
  select(Name,total)

#write the top ten girl names to a csv
write.csv(top10girlnamesoutput, file = "toptengirlnames.csv")


###Question 4
#Create visualizations
#top10 girl names visualization
top10girlnamesoutput %>% 
  ggplot(aes(x=Name, y=total, fill=Name))+geom_bar(stat="identity")+geom_text(aes(label = total),vjust = -0.5) + labs(title="2015 & 2016 Most Popular Girl Names", x="Girl Name", y="Total Count of Girls Name")
